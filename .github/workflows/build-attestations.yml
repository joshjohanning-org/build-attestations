name: Build Attestations

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      dotnet-version: '8.0'

    # if you use ANY permissions in yaml, you must include all permissions
    permissions:
      # for checkout
      contents: read
      # you must include thess permission to use the action/attest-build-provenance@v1 action
      id-token: write
      attestations: write


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore src/MyClassLibrary/MyClassLibrary.csproj

      - name: Build 
        run: dotnet build --configuration Release src/MyClassLibrary/MyClassLibrary.csproj

      - name: Create staging directory
        run: mkdir -p ./staging
  
      - name: Copy DLL to staging directory
        run: cp ./src/MyClassLibrary/bin/Release/net${{env.dotnet-version}}/MyClassLibrary.dll ./staging/

      - name: Create artifact
        run: |
          cd staging
          tar -czf build.tar.gz ./*

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          # Specify the path to the folder you want to attest
          subject-path: staging/build.tar.gz

      # - uses: advanced-security/generate-sbom-action@v1
      #   id: gensbom

      - uses: anchore/sbom-action@v0
        with:
          path: ./staging/
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Attest SBOM
        uses: actions/attest-sbom@v2
        with:
          subject-path: 'staging/build.tar.gz'
          sbom-path: 'sbom.spdx.json'
          # sbom-path: '${{ steps.gensbom.outputs.fileName }}'

      - name: Upload build artifact 
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: staging/

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ${{ steps.gensbom.outputs.fileName }}

  # Lets validate the attestation
  validate:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
      attestations: write

    steps:
      - name: Create staging directory
        run: mkdir -p ./staging

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: staging/

      - name: List files in staging directory 
        run: ls -al staging/

      - name: Validate Attestation (pass)
        id: validate
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        # SUCCESS CASE
        run: |
          gh attestation verify --owner ${{ github.repository_owner }} staging/build.tar.gz --format json > results.json
          cat results.json | jq
          echo "resultsfile=results.json" >> $GITHUB_OUTPUT 
        continue-on-error: true

      - name: Validate Attestation (fail)
        id: validate2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # FAIL CASE
        run: gh attestation verify --owner devopselvis staging/build.tar.gz --format json | jq

      - name: Output Attestation
        if: always()
        run: |
          echo "## Attestation result" >> $GITHUB_STEP_SUMMARY
          echo "The attestation result is: ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Attestation details" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat results.json | jq '.[].verificationResult' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
